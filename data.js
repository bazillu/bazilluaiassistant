// data.js - Knowledge base for Spur AI const spurAIData = { // Greetings that the AI can use to start conversations greetings: [ "Hello! I'm Spur AI. How can I assist you today?", "Welcome to Spur! I'm here to help with your questions.", "Hi there! I'm your AI assistant. What would you like to explore today?" ], // Topics - structured knowledge with synonyms and content topics: { // Example topic structure // "topic_key": { // synonyms: ["related term 1", "related term 2"], // content: "The actual content about this topic" // } "noun": { synonyms: ["what is a noun", "define noun", "noun definition", "parts of speech noun"], content: "A noun is a word that functions as the name of a specific object or set of objects, such as living creatures, places, actions, qualities, states of existence, or ideas." } }, // Concept definitions - key terms and their explanations concepts: { "artificial intelligence": "Artificial Intelligence (AI) refers to systems or machines that mimic human intelligence to perform tasks and can iteratively improve themselves based on the information they collect.", "machine learning": "Machine Learning is a subset of AI that enables systems to learn and improve from experience without being explicitly programmed.", "neural network": "Neural Networks are computing systems inspired by the biological neural networks that constitute animal brains, designed to recognize patterns and interpret data.", "deep learning": "Deep Learning is a subset of machine learning that uses neural networks with many layers (hence 'deep') to analyze various factors of data." }, // Factual information - can be expanded with domain-specific knowledge facts: { "earth": "Earth is the third planet from the Sun and the only astronomical object known to harbor life.", "water": "Water covers about 71% of the Earth's surface, primarily in oceans and other large water bodies.", "human brain": "The human brain contains approximately 86 billion neurons and weighs about 3 pounds (1.4 kg).", "internet": "The Internet was developed in the late 1960s and early 1970s by the United States Department of Defense as a means of creating a decentralized communication network." }, // Common responses to typical user inputs responses: { "hello": ["Hi there! How can I help you today?", "Hello! What can I assist you with?"], "how are you": ["I'm functioning well, thank you! How can I assist you?", "I'm here and ready to help! What's on your mind?"], "thank you": ["You're welcome! Is there anything else you'd like to know?", "Happy to help! Let me know if you need anything else."], "help": ["I can answer questions, explain concepts, or help with creative tasks. What do you need?", "I'm here to assist! Just let me know what you're looking for."] }, // Fallback responses when no specific match is found fallback: [ "That's an interesting question. Let me think about that...", "I'm processing your request. Give me a moment...", "I'm analyzing that query. Here's what I can tell you..." ], // Synonyms for common terms (to improve matching) synonyms: { "disadvantages": ["demerits", "drawbacks", "downsides", "limitations", "cons", "negative aspects"], "advantages": ["merits", "benefits", "upsides", "strengths", "pros", "positive aspects"], "define": ["what is", "meaning of", "definition of", "explain", "describe", "tell me about"], "how to": ["steps to", "guide for", "method for", "process of", "way to"] }, // Chat history storage chatHistory: [] }; // Function to save updated data to localStorage function saveSpurData() { localStorage.setItem('spurAIData', JSON.stringify(spurAIData)); } // Function to load data from localStorage if available function loadSpurData() { const savedData = localStorage.getItem('spurAIData'); if (savedData) { const parsedData = JSON.parse(savedData); // Update each category with saved data Object.keys(parsedData).forEach(category => { if (category !== 'chatHistory') { // Don't overwrite chat history on page load spurAIData[category] = parsedData[category]; } }); console.log('Loaded saved AI data from localStorage'); } } // Function to save a chat to history function saveChatToHistory(title, messages) { const timestamp = new Date(); const chatId = 'chat_' + timestamp.getTime(); const chatEntry = { id: chatId, title: title || `Chat ${spurAIData.chatHistory.length + 1}`, timestamp: timestamp.toISOString(), messages: messages || [] }; spurAIData.chatHistory.unshift(chatEntry); // Add to beginning of array // Limit history to 20 chats if (spurAIData.chatHistory.length > 20) { spurAIData.chatHistory = spurAIData.chatHistory.slice(0, 20); } saveSpurData(); return chatId; } // Function to get a chat from history function getChatFromHistory(chatId) { return spurAIData.chatHistory.find(chat => chat.id === chatId); } // Initialize by loading any saved data loadSpurData();